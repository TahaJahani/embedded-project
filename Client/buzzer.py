"""
Micropython (Raspberry Pi Pico)
Plays music written on onlinesequencer.net through a passive piezo buzzer.
Uses fast arpeggios with a single buzzer to simulate polyphony
Also supports multiple buzzers at once for real polyphony
https://github.com/james1236/buzzer_music
"""

from machine import Pin, PWM
import RPi.GPIO as GPIO
from math import ceil
from time import sleep

BUZZER_PIN = 26

tones = {
    'C0': 16,
    'C#0': 17,
    'D0': 18,
    'D#0': 19,
    'E0': 21,
    'F0': 22,
    'F#0': 23,
    'G0': 24,
    'G#0': 26,
    'A0': 28,
    'A#0': 29,
    'B0': 31,
    'C1': 33,
    'C#1': 35,
    'D1': 37,
    'D#1': 39,
    'E1': 41,
    'F1': 44,
    'F#1': 46,
    'G1': 49,
    'G#1': 52,
    'A1': 55,
    'A#1': 58,
    'B1': 62,
    'C2': 65,
    'C#2': 69,
    'D2': 73,
    'D#2': 78,
    'E2': 82,
    'F2': 87,
    'F#2': 92,
    'G2': 98,
    'G#2': 104,
    'A2': 110,
    'A#2': 117,
    'B2': 123,
    'C3': 131,
    'C#3': 139,
    'D3': 147,
    'D#3': 156,
    'E3': 165,
    'F3': 175,
    'F#3': 185,
    'G3': 196,
    'G#3': 208,
    'A3': 220,
    'A#3': 233,
    'B3': 247,
    'C4': 262,
    'C#4': 277,
    'D4': 294,
    'D#4': 311,
    'E4': 330,
    'F4': 349,
    'F#4': 370,
    'G4': 392,
    'G#4': 415,
    'A4': 440,
    'A#4': 466,
    'B4': 494,
    'C5': 523,
    'C#5': 554,
    'D5': 587,
    'D#5': 622,
    'E5': 659,
    'F5': 698,
    'F#5': 740,
    'G5': 784,
    'G#5': 831,
    'A5': 880,
    'A#5': 932,
    'B5': 988,
    'C6': 1047,
    'C#6': 1109,
    'D6': 1175,
    'D#6': 1245,
    'E6': 1319,
    'F6': 1397,
    'F#6': 1480,
    'G6': 1568,
    'G#6': 1661,
    'A6': 1760,
    'A#6': 1865,
    'B6': 1976,
    'C7': 2093,
    'C#7': 2217,
    'D7': 2349,
    'D#7': 2489,
    'E7': 2637,
    'F7': 2794,
    'F#7': 2960,
    'G7': 3136,
    'G#7': 3322,
    'A7': 3520,
    'A#7': 3729,
    'B7': 3951,
    'C8': 4186,
    'C#8': 4435,
    'D8': 4699,
    'D#8': 4978,
    'E8': 5274,
    'F8': 5588,
    'F#8': 5920,
    'G8': 6272,
    'G#8': 6645,
    'A8': 7040,
    'A#8': 7459,
    'B8': 7902,
    'C9': 8372,
    'C#9': 8870,
    'D9': 9397,
    'D#9': 9956,
    'E9': 10548,
    'F9': 11175,
    'F#9': 11840,
    'G9': 12544,
    'G#9': 13290,
    'A9': 14080,
    'A#9': 14917,
    'B9': 15804
}


# Time, Note, Duration, Instrument (onlinesequencer.net schematic format)
# 0 D4 8 0;0 D5 8 0;0 G4 8 0;8 C5 2 0;10 B4 2 0;12 G4 2 0;14 F4 1 0;15 G4 17 0;16 D4 8 0;24 C4 8 0

class music:
    def __init__(self, songString='0 D4 8 0', looping=True, tempo=3, duty=2512, pin=None, pins=[Pin(0)]):
        self.tempo = tempo
        self.song = songString
        self.looping = looping
        self.duty = duty

        self.stopped = False

        self.timer = -1
        self.beat = -1
        self.arpnote = 0

        self.pwms = []

        if (not (pin is None)):
            pins = [pin]
        self.pins = pins
        for pin in pins:
            self.pwms.append(PWM(pin))

        self.notes = []

        self.playingNotes = []
        self.playingDurations = []

        # Find the end of the song
        self.end = 0
        splitSong = self.song.split(";")
        for note in splitSong:
            snote = note.split(" ")
            testEnd = round(float(snote[0])) + ceil(float(snote[2]))
            if (testEnd > self.end):
                self.end = testEnd

        # Create empty song structure
        while (self.end > len(self.notes)):
            self.notes.append(None)

        # Populate song structure with the notes
        for note in splitSong:
            snote = note.split(" ")
            beat = round(float(snote[0]));

            if (self.notes[beat] == None):
                self.notes[beat] = []
            self.notes[beat].append([snote[1], ceil(float(snote[2]))])  # Note, Duration

        # Round up end of song to nearest bar
        self.end = ceil(self.end / 8) * 8

    def stop(self):
        for pwm in self.pwms:
            pwm.deinit()
        self.stopped = True

    def restart(self):
        self.beat = -1
        self.timer = 0
        self.stop()
        self.pwms = []
        for pin in self.pins:
            self.pwms.append(PWM(pin))
        self.stopped = False

    def resume(self):
        self.stop()
        self.pwms = []
        for pin in self.pins:
            self.pwms.append(PWM(pin))
        self.stopped = False

    def tick(self):
        if (not self.stopped):
            self.timer = self.timer + 1

            # Loop
            if (self.timer % (self.tempo * self.end) == 0 and (not (self.timer == 0))):
                if (not self.looping):
                    self.stop()
                    return False
                self.beat = -1
                self.timer = 0

            # On Beat
            if (self.timer % self.tempo == 0):
                self.beat = self.beat + 1

                # Remove expired notes from playing list
                i = 0
                while (i < len(self.playingDurations)):
                    self.playingDurations[i] = self.playingDurations[i] - 1
                    if (self.playingDurations[i] <= 0):
                        self.playingNotes.pop(i)
                        self.playingDurations.pop(i)
                    else:
                        i = i + 1

                # Add new notes and their durations to the playing list

                """
                #Old method runs for every note, slow to process on every beat and causes noticeable delay
                ssong = song.split(";")
                for note in ssong:
                    snote = note.split(" ")
                    if int(snote[0]) == beat:
                        playingNotes.append(snote[1])
                        playingDurations.append(int(snote[2]))
                """

                if (self.beat < len(self.notes)):
                    if (self.notes[self.beat] != None):
                        for note in self.notes[self.beat]:
                            self.playingNotes.append(note[0])
                            self.playingDurations.append(note[1])

                # Only need to run these checks on beats
                i = 0
                for pwm in self.pwms:
                    if (i >= len(self.playingNotes)):
                        if hasattr(pwm, 'duty_u16'):
                            pwm.duty_u16(0)
                        else:
                            pwm.duty(0)
                    else:
                        # Play note
                        if hasattr(pwm, 'duty_u16'):
                            pwm.duty_u16(self.duty)
                        else:
                            pwm.duty(self.duty)
                        pwm.freq(tones[self.playingNotes[i]])
                    i = i + 1

            # Play arp of all playing notes
            if (len(self.playingNotes) > len(self.pwms)):
                p = self.pwms[len(self.pwms) - 1];
                if hasattr(p, 'duty_u16'):
                    p.duty_u16(self.duty)
                else:
                    p.duty(self.duty)

                if (self.arpnote > len(self.playingNotes) - len(self.pwms)):
                    self.arpnote = 0
                self.pwms[len(self.pwms) - 1].freq(tones[self.playingNotes[self.arpnote + (len(self.pwms) - 1)]])
                self.arpnote = self.arpnote + 1

            return True
        else:
            return False


# Example songs

#    https://onlinesequencer.net/195547
songs = [
    '0 E6 2 43;2 D#6 2 43;4 E6 2 43;6 D#6 2 43;8 E6 2 43;10 B5 2 43;12 D6 2 43;14 C6 2 43;16 A5 4 43;28 B5 4 43;40 C6 4 43;22 C5 2 43;24 E5 2 43;26 A5 2 43;34 E5 2 43;36 G#5 2 43;38 B5 2 43;46 E5 2 43;48 E6 2 43;50 D#6 2 43;52 E6 2 43;54 D#6 2 43;56 E6 2 43;58 B5 2 43;60 D6 2 43;62 C6 2 43;64 A5 4 43;76 B5 4 43;70 C5 2 43;72 E5 2 43;74 A5 2 43;82 E5 2 43;88 A5 4 43;84 C6 2 43;86 B5 2 43;16 A3 2 41;18 E4 2 41;20 A4 2 41;28 E3 2 41;30 E4 2 41;32 G#4 2 41;40 A3 2 41;42 E4 2 41;44 A4 2 41;64 A3 2 41;66 E4 2 41;68 A4 2 41;76 E3 2 41;78 E4 2 41;80 G#4 2 41;88 A3 2 41;90 E4 2 41;92 A4 2 41;96 E6 2 43;98 D#6 2 43;100 E6 2 43;102 D#6 2 43;104 E6 2 43;106 B5 2 43;108 D6 2 43;110 C6 2 43;112 A5 4 43;124 B5 4 43;136 C6 4 43;118 C5 2 43;120 E5 2 43;122 A5 2 43;130 E5 2 43;132 G#5 2 43;134 B5 2 43;142 E5 2 43;144 E6 2 43;146 D#6 2 43;148 E6 2 43;150 D#6 2 43;152 E6 2 43;154 B5 2 43;156 D6 2 43;158 C6 2 43;160 A5 4 43;172 B5 4 43;166 C5 2 43;168 E5 2 43;170 A5 2 43;178 E5 2 43;184 A5 4 43;180 C6 2 43;182 B5 2 43;112 A3 2 41;114 E4 2 41;116 A4 2 41;124 E3 2 41;126 E4 2 41;128 G#4 2 41;136 A3 2 41;138 E4 2 41;140 A4 2 41;160 A3 2 41;162 E4 2 41;164 A4 2 41;172 E3 2 41;174 E4 2 41;176 G#4 2 41;184 A3 2 41;186 E4 2 41;188 A4 2 41;196 C4 2 41;198 G4 2 41;200 C5 2 41;208 G3 2 41;210 G4 2 41;212 B4 2 41;220 A3 2 41;222 E4 2 41;224 A4 2 41;232 E3 2 41;234 E4 2 41;232 B5 4 43;190 B5 2 43;192 C6 2 43;194 D6 2 43;202 G5 2 43;204 F6 2 43;206 E6 2 43;214 F5 2 43;216 E6 2 43;218 D6 2 43;226 E5 2 43;228 D6 2 43;230 C6 2 43;248 E7 2 43;250 D#6 2 41;252 E6 2 41;258 D#6 2 41;260 E6 2 41;236 E5 2 41;242 E5 2 41;244 E6 2 41;238 E5 2 43;240 E6 2 43;246 E6 2 43;254 D#6 2 43;256 E6 2 43;262 D#6 2 43;264 E6 2 43;266 D#6 2 43;268 E6 2 43;274 B5 2 43;276 D6 2 43;278 C6 2 43;270 D#6 2 43;272 E6 2 43;280 A5 4 43;292 B5 4 43;304 C6 4 43;286 C5 2 43;288 E5 2 43;290 A5 2 43;298 E5 2 43;300 G#5 2 43;302 B5 2 43;310 E5 2 43;312 E6 2 43;314 D#6 2 43;316 E6 2 43;318 D#6 2 43;320 E6 2 43;322 B5 2 43;324 D6 2 43;326 C6 2 43;328 A5 4 43;340 B5 4 43;334 C5 2 43;336 E5 2 43;338 A5 2 43;346 E5 2 43;352 A5 4 43;348 C6 2 43;350 B5 2 43;280 A3 2 41;282 E4 2 41;284 A4 2 41;292 E3 2 41;294 E4 2 41;296 G#4 2 41;304 A3 2 41;306 E4 2 41;308 A4 2 41;328 A3 2 41;330 E4 2 41;332 A4 2 41;340 E3 2 41;342 E4 2 41;344 G#4 2 41;352 A3 2 41;354 E4 2 41;356 A4 2 41;364 C4 2 41;366 G4 2 41;368 C5 2 41;376 G3 2 41;378 G4 2 41;380 B4 2 41;388 A3 2 41;390 E4 2 41;392 A4 2 41;400 E3 2 41;402 E4 2 41;400 B5 4 43;358 B5 2 43;360 C6 2 43;362 D6 2 43;370 G5 2 43;372 F6 2 43;374 E6 2 43;382 F5 2 43;384 E6 2 43;386 D6 2 43;394 E5 2 43;396 D6 2 43;398 C6 2 43;416 E7 2 43;418 D#6 2 41;420 E6 2 41;426 D#6 2 41;428 E6 2 41;404 E5 2 41;410 E5 2 41;412 E6 2 41;406 E5 2 43;408 E6 2 43;414 E6 2 43;422 D#6 2 43;424 E6 2 43;430 D#6 2 43;432 E6 2 43;434 D#6 2 43;436 E6 2 43;442 B5 2 43;444 D6 2 43;446 C6 2 43;438 D#6 2 43;440 E6 2 43;460 B5 4 43;448 A5 4 43;472 C6 4 43;454 C5 2 43;456 E5 2 43;458 A5 2 43;466 E5 2 43;468 G#5 2 43;470 B5 2 43;478 E5 2 43;480 E6 2 43;482 D#6 2 43;484 E6 2 43;486 D#6 2 43;488 E6 2 43;490 B5 2 43;492 D6 2 43;494 C6 2 43;496 A5 4 43;448 A3 2 41;450 E4 2 41;452 A4 2 41;460 E3 2 41;462 E4 2 41;464 G#4 2 41;472 A3 2 41;474 E4 2 41;476 A4 2 41;496 A3 2 41;498 E4 2 41;500 A4 2 41;526 C6 2 43;528 C6 2 43;526 E5 2 43;528 F5 2 43;526 A#4 2 41;526 C5 2 41;528 A4 2 41;530 G4 2 41;528 C5 2 41;530 A#4 2 41;530 C5 2 41;508 E3 2 41;520 A3 2 41;510 E4 2 41;512 G#4 2 41;522 E4 2 41;524 A4 2 41;502 C5 2 43;504 E5 2 43;506 A5 2 43;514 E5 2 43;516 C6 2 43;518 B5 2 43;508 B5 4 43;520 A5 4 43;532 F4 2 41;534 A4 2 41;536 C5 2 41;538 A4 2 41;540 C5 2 41;542 A4 2 41;544 F4 2 41;546 A#4 2 41;548 D5 2 41;550 A#4 2 41;552 D5 2 41;554 A#4 2 41;556 F4 2 41;558 E5 2 41;560 F4 2 41;560 G4 2 41;560 A#4 2 41;564 F4 2 41;564 G4 2 41;564 A#4 2 41;562 E5 2 41;566 E5 2 41;532 C6 8 43;543 E6 1 43;544 E6 4 43;548 D6 4 43;540 F6 3 43;552 A#6 3 43;555 A6 1 43;556 A6 2 43;558 G6 2 43;560 F6 2 43;562 E6 2 43;564 D6 2 43;566 C6 2 43;530 E5 1.5 43;530 G5 1.5 43;530 C6 1.5 43;568 A#5 4 43;572 A5 3.75 43;576 A5 1 43;577 G5 1 43;578 A5 1 43;579 A#5 1 43;568 F4 2 41;570 A4 2 41;572 C5 2 41;574 A4 2 41;576 C5 2 41;578 A4 2 41;580 F4 2 41;582 A4 2 41;584 C5 2 41;586 A4 2 41;588 C5 2 41;590 A4 2 41;592 E4 2 41;594 A4 2 41;596 C5 2 41;598 A4 2 41;600 D4 2 41;600 D5 2 41;602 F4 2 41;580 C6 8 43;588 D6 2 43;590 D#6 2 43;600 F6 2 43;602 A5 2 43;598 E6 2 43;592 E6 6 43;604 G4 2 41;608 G4 2 41;612 G4 2 41;606 E5 2 41;610 E5 2 41;614 F5 2 41;604 C6 8 43;615 B5 1 43;612 D6 3 43;616 C5 4 41;616 E5 4 41;616 C6 1 43;618 G5 1 43;620 A5 1 43;622 B5 1 43;624 C6 1 43;626 D6 1 43;628 E6 1 43;617 G6 1 43;619 G6 1 43;621 G6 1 43;623 G6 1 43;625 G6 1 43;627 G6 1 43;629 G6 1 43;630 C7 1 43;631 B6 1 43;632 A6 1 43;633 G6 1 43;634 F6 1 43;635 E6 1 43;636 D6 1 43;637 G6 1 43;638 F6 1 43;639 D6 1 43;640 C6 1 43;642 G5 1 43;644 A5 1 43;646 B5 1 43;648 C6 1 43;650 D6 1 43;652 E6 1 43;641 G6 1 43;643 G6 1 43;645 G6 1 43;647 G6 1 43;649 G6 1 43;651 G6 1 43;653 G6 1 43;654 C7 1 43;655 B6 1 43;656 A6 1 43;657 G6 1 43;658 F6 1 43;659 E6 1 43;660 D6 1 43;661 G6 1 43;662 F6 1 43;663 D6 1 43;622 F5 2 41;624 E5 2 41;626 D5 2 41;622 G5 2 41;624 G5 2 41;626 G5 2 41;626 F5 2 41;628 E5 4 41;628 G5 4 41;628 C5 4 41;632 F4 4 41;636 G4 4 41;632 A4 4 41;636 B4 4 41;640 C5 4 41;652 C5 4 41;652 E5 4 41;652 G5 4 41;656 F4 4 41;656 A4 4 41;660 G4 4 41;660 B4 4 41;646 G5 2 41;648 G5 2 41;650 G5 2 41;646 F5 2 41;648 E5 2 41;650 F5 2 41;650 D5 2 41;664 G#4 4 41;664 B4 4 41;531.5 F5 0.25 43;531.75 A5 0.25 43;575.75 A#5 0.25 43;664 E6 1 43;665 F6 1 43;666 E6 1 43;667 D#6 1 43;668 E6 1 43;669 B5 1 43;670 E6 1 43;671 D#6 1 43;672 E6 1 43;673 B5 1 43;674 E6 1 43;675 D#6 1 43;676 E6 6 43;682 B5 2 43;684 E6 2 43;686 D#6 2 43;688 E6 6 43;694 B5 2 43;696 E6 2 43;702 D#6 2 43;704 E6 2 43;710 D#6 2 43;712 E6 2 43;714 D#6 2 43;716 E6 2 43;718 B5 2 43;720 D6 2 43;722 C6 2 43;698 D#6 2 41;700 E6 2 41;708 E6 2 41;706 D#6 2 41;724 A5 4 43;736 B5 4 43;748 C6 4 43;772 A5 4 43;784 B5 4 43;796 A5 4 43;724 A3 2 41;726 E4 2 41;728 A4 2 41;736 E3 2 41;738 E4 2 41;740 G#4 2 41;748 A3 2 41;750 E4 2 41;752 A4 2 41;772 A3 2 41;774 E4 2 41;776 A4 2 41;784 E3 2 41;786 E4 2 41;788 G#4 2 41;796 A3 2 41;798 E4 2 41;800 A4 2 41;730 C5 2 43;732 E5 2 43;734 A5 2 43;742 E5 2 43;744 G#5 2 43;746 B5 2 43;754 E5 2 43;756 E6 2 43;758 D#6 2 43;760 E6 2 43;762 D#6 2 43;764 E6 2 43;766 B5 2 43;768 D6 2 43;770 C6 2 43;778 C5 2 43;780 E5 2 43;782 A5 2 43;790 E5 2 43;792 C6 2 43;794 B5 2 43;196 E6 6 43;208 D6 6 43;220 C6 6 43;364 E6 6 43;376 D6 6 43;388 C6 6 43;808 E6 6 43;820 D6 6 43;832 C6 6 43;844 B5 4 43;802 B5 2 43;804 C6 2 43;806 D6 2 43;814 G5 2 43;816 F6 2 43;818 E6 2 43;826 F5 2 43;828 E6 2 43;830 D6 2 43;838 E5 2 43;840 D6 2 43;842 C6 2 43;808 C4 2 41;810 G4 2 41;812 C5 2 41;820 G3 2 41;822 G4 2 41;824 B4 2 41;832 A3 2 41;834 E4 2 41;836 A4 2 41;844 E3 2 41;846 E4 2 41;848 E5 2 41;850 E5 2 43;858 E6 2 43;860 E7 2 43;852 E6 2 43;854 E5 2 41;856 E6 2 41;862 D#6 2 41;864 E6 2 41;870 D#6 2 41;872 E6 2 41;866 D#6 2 43;868 E6 2 43;874 D#6 2 43;876 E6 2 43;878 D#6 2 43;880 E6 2 43;882 D#6 2 43;884 E6 2 43;886 B5 2 43;888 D6 2 43;890 C6 2 43;892 A5 4 43;904 B5 4 43;916 C6 4 43;940 A5 4 43;952 B5 4 43;964 A5 4 43;898 C5 2 43;900 E5 2 43;902 A5 2 43;910 E5 2 43;912 G#5 2 43;914 B5 2 43;922 E5 2 43;924 E6 2 43;926 D#6 2 43;928 E6 2 43;930 D#6 2 43;932 E6 2 43;934 B5 2 43;936 D6 2 43;938 C6 2 43;946 C5 2 43;948 E5 2 43;950 A5 2 43;958 E5 2 43;960 C6 2 43;962 B5 2 43;892 A3 2 41;894 E4 2 41;896 A4 2 41;904 E3 2 41;916 A3 2 41;940 A3 2 41;952 E3 2 41;964 A3 2 41;906 E4 2 41;908 G#4 2 41;918 E4 2 41;920 A4 2 41;942 E4 2 41;944 A4 2 41;954 E4 2 41;956 G#4 2 41;966 A3 2 41;968 A3 2 41;970 A3 2 41;972 A3 2 41;974 A3 2 41;976 A3 2 41;978 A3 2 41;980 A3 2 41;982 A3 2 41;984 A3 2 41;986 A3 2 41;988 A3 2 41;990 A3 2 41;992 A3 2 41;994 A3 2 41;996 A3 2 41;998 A3 2 41;1000 A3 2 41;1002 A3 2 41;1004 A3 2 41;1006 A3 2 41;1008 A3 2 41;1010 A3 2 41;976 E5 12 43;976 G5 12 43;976 A#5 12 43;976 C#6 12 43;988 F5 8 43;988 A5 8 43;988 D6 8 43;1012 A3 2 41;1014 A3 2 41;1016 A3 2 41;1018 A3 2 41;1020 A3 2 41;1022 A3 2 41;996 C#6 2 43;998 D6 2 43;996 E6 2 43;998 F6 2 43;1000 F6 8 43;1000 D6 8 43;1000 G#5 8 43;1012 A5 12 43;1012 C6 12 43;1012 E6 12 43;1008 G#5 4 43;1008 D6 4 43;1008 F6 4 43;1024 D3 2 41;1026 D3 2 41;1028 D3 2 41;1030 D3 2 41;1032 D3 2 41;1034 D3 2 41;1036 D#3 2 41;1038 D#3 2 41;1040 D#3 2 41;1042 D#3 2 41;1044 D#3 2 41;1046 D#3 2 41;1048 E3 2 41;1050 E3 2 41;1052 E3 2 41;1054 E3 2 41;1056 E3 2 41;1058 E3 2 41;1060 A2 2 41;1024 A3 2 41;1026 A3 2 41;1028 A3 2 41;1030 A3 2 41;1032 A3 2 41;1034 A3 2 41;1036 A3 2 41;1038 A3 2 41;1040 A3 2 41;1042 A3 2 41;1044 A3 2 41;1046 A3 2 41;1048 A3 2 41;1050 A3 2 41;1052 A3 2 41;1054 A3 2 41;1056 G#3 2 41;1058 G#3 2 41;1060 A3 2 41;1062 A3 2 41;1064 A3 2 41;1066 A3 2 41;1068 A3 2 41;1070 A3 2 41;1072 A3 2 41;1074 A3 2 41;1076 A3 2 41;1078 A3 2 41;1080 A3 2 41;1082 A3 2 41;1024 F5 8 43;1024 D6 8 43;1036 C5 8 43;1036 F#5 8 43;1036 A5 8 43;1032 C6 2 43;1034 B5 2 43;1032 E5 2 43;1034 D5 2 43;1044 C5 4 43;1044 A5 4 43;1048 A5 4 43;1052 C6 4 43;1056 B5 4 43;1048 C5 4 43;1052 E5 4 43;1056 D5 4 43;1060 C5 12 43;1060 A5 12 43;1096 A3 2 41;1098 A3 2 41;1100 A3 2 41;1102 A3 2 41;1104 A3 2 41;1106 A3 2 41;1108 A#3 2 41;1110 A#3 2 41;1112 A#3 2 41;1114 A#3 2 41;1116 A#3 2 41;1118 A#3 2 41;1072 E5 12 43;1072 G5 12 43;1072 A#5 12 43;1072 C#6 12 43;1084 F5 8 43;1084 A5 8 43;1084 D6 8 43;1084 A3 2 41;1086 A3 2 41;1088 A3 2 41;1090 A3 2 41;1092 A3 2 41;1094 A3 2 41;1092 C#6 2 43;1094 D6 2 43;1092 E6 2 43;1094 F6 2 43;1096 F6 8 43;1096 D6 8 43;1108 F6 12 43;1108 D6 12 43;1104 D6 4 43;1104 F6 4 43;1120 A#3 2 41;1122 A#3 2 41;1124 A#3 2 41;1126 A#3 2 41;1128 A#3 2 41;1130 A#3 2 41;1132 A#3 2 41;1134 A#3 2 41;1136 A#3 2 41;1138 A#3 2 41;1140 A#3 2 41;1142 A#3 2 41;1144 B3 2 41;1146 B3 2 41;1148 B3 2 41;1150 B3 2 41;1152 B3 2 41;1154 B3 2 41;1156 C4 8 41;1120 D#6 8 43;1120 G5 8 43;1132 D5 8 43;1132 A#5 8 43;1144 D5 8 43;1144 G#5 8 43;1156 C5 8 43;1156 A5 8 43;1140 A5 4 43;1140 D5 4 43;1152 D5 4 43;1152 G#5 4 43;1128 D6 2 43;1130 C6 2 43;1128 F5 2 43;1130 D#5 2 43;1156 E5 8 43;1168 B5 4 43;1168 E5 4 43;1168 E4 4 41;1168 G#4 4 41;1132 F5 8 43;1144 F5 8 43;1140 F5 4 43;1152 F5 4 43;1180 A2 4 41;1188 A4 4 41;1192 A4 4 41;1188 C5 4 41;1192 C5 4 41;1188 E5 4 41;1192 E5 4 41;1200 E5 4 41;1204 E5 4 41;1200 C5 4 41;1204 C5 4 41;1200 A4 4 41;1204 A4 4 41;1212 E5 4 41;1216 E5 4 41;1212 C5 4 41;1216 C5 4 41;1212 A4 4 41;1216 A4 4 41;1180 A4 1.3333333730697632 43;1181.3333740234375 C5 1.3333333730697632 43;1182.6666259765625 E5 1.3333333730697632 43;1184 A5 1.3333333730697632 43;1185.3333740234375 C6 1.3333333730697632 43;1186.6666259765625 E6 1.3333333730697632 43;1188 D6 1.3333333730697632 43;1189.3333740234375 C6 1.3333333730697632 43;1190.6666259765625 B5 1.3333333730697632 43;1192 A5 1.3333333730697632 43;1193.3333740234375 C6 1.3333333730697632 43;1194.6666259765625 E6 1.3333333730697632 43;1196 A6 1.3333333730697632 43;1197.3333740234375 C7 1.3333333730697632 43;1198.6666259765625 E7 1.3333333730697632 43;1200 D7 1.3333333730697632 43;1201.3333740234375 C7 1.3333333730697632 43;1202.6666259765625 B6 1.3333333730697632 43;1204 A6 1.3333333730697632 43;1205.3333740234375 C7 1.3333333730697632 43;1206.6666259765625 E7 1.3333333730697632 43;1208 A7 1.3333333730697632 43;1214.6666259765625 B7 1.3333333730697632 43;1216 A#7 1.3333333730697632 43;1217.3333740234375 A7 1.3333333730697632 43;1218.6666259765625 G#7 1.3333333730697632 43;1220 G7 1.3333333730697632 43;1221.3333740234375 F#7 1.3333333730697632 43;1222.6666259765625 F7 1.3333333730697632 43;1224 E7 1.3333333730697632 43;1225.3333740234375 D#7 1.3333333730697632 43;1226.6666259765625 D7 1.3333333730697632 43;1228 C#7 1.3333333730697632 43;1229.3333740234375 C7 1.3333333730697632 43;1230.6666259765625 B6 1.3333333730697632 43;1232 A#6 1.3333333730697632 43;1233.3333740234375 A6 1.3333333730697632 43;1234.6666259765625 G#6 1.3333333730697632 43;1236 G6 1.3333333730697632 43;1237.3333740234375 F#6 1.3333333730697632 43;1238.6666259765625 F6 1.3333333730697632 43;1240 E6 2 43;1242 D#6 2 43;1244 E6 2 43;1246 B5 2 43;1248 D6 2 43;1250 C6 2 43;1209.3333740234375 C7 1.3333333730697632 43;1210.6666259765625 E7 1.3333333730697632 43;1212 D7 1.3333333730697632 43;1213.3333740234375 C7 1.3333333730697632 43;1252 A5 4 43;1264 B5 4 43;1276 C6 4 43;1300 A5 4 43;1312 B5 4 43;1324 A5 4 43;1336 E6 6 43;1348 D6 6 43;1360 C6 6 43;1372 B5 4 43;1258 C5 2 43;1260 E5 2 43;1262 A5 2 43;1270 E5 2 43;1272 G#5 2 43;1274 B5 2 43;1282 E5 2 43;1284 E6 2 43;1286 D#6 2 43;1288 E6 2 43;1290 D#6 2 43;1292 E6 2 43;1294 B5 2 43;1306 C5 2 43;1298 C6 2 43;1296 D6 2 43;1308 E5 2 43;1310 A5 2 43;1318 E5 2 43;1320 C6 2 43;1322 B5 2 43;1330 B5 2 43;1332 C6 2 43;1334 D6 2 43;1344 F6 2 43;1346 E6 2 43;1356 E6 2 43;1358 D6 2 43;1368 D6 2 43;1370 C6 2 43;1378 E5 2 43;1380 E6 2 43;1388 E7 2 43;1394 D#6 2 43;1396 E6 2 43;1402 D#6 2 43;1404 E6 2 43;1406 D#6 2 43;1412 E6 2 43;1414 B5 2 43;1416 D6 2 43;1418 C6 2 43;1252 A3 2 41;1256 A4 2 41;1254 E4 2 41;1264 E3 2 41;1266 E4 2 41;1268 G#4 2 41;1276 A3 2 41;1278 E4 2 41;1280 A4 2 41;1300 A3 2 41;1302 E4 2 41;1304 A4 2 41;1312 E3 2 41;1314 E4 2 41;1316 G#4 2 41;1324 A3 2 41;1326 E4 2 41;1328 A4 2 41;1336 C4 2 41;1338 G4 2 41;1340 C5 2 41;1348 G3 2 41;1350 G4 2 41;1352 B4 2 41;1342 G5 2 43;1354 F5 2 43;1366 E5 2 43;1360 A3 2 41;1362 E4 2 41;1364 A4 2 41;1372 E3 2 41;1374 E4 2 41;1376 E5 2 41;1408 E6 2 43;1410 D#6 2 43;1382 E5 2 41;1384 E6 2 41;1386 E6 2 43;1390 D#6 2 41;1392 E6 2 41;1398 D#6 2 41;1400 E6 2 41;1468 A5 4 43;1480 B5 4 43;1492 A5 4 43;1474 C5 2 43;1476 E5 2 43;1478 A5 2 43;1486 E5 2 43;1488 C6 2 43;1490 B5 2 43;1468 A3 2 41;1470 E4 2 41;1472 A4 2 41;1480 E3 2 41;1482 E4 2 41;1484 G#4 2 41;1492 A2 4 41;1492 A3 4 41;1420 A5 4 43;1432 B5 4 43;1444 C6 4 43;1426 C5 2 43;1428 E5 2 43;1430 A5 2 43;1438 E5 2 43;1440 G#5 2 43;1442 B5 2 43;1450 E5 2 43;1452 E6 2 43;1454 D#6 2 43;1456 E6 2 43;1458 D#6 2 43;1460 E6 2 43;1462 B5 2 43;1464 D6 2 43;1466 C6 2 43;1420 A3 2 41;1422 E4 2 41;1424 A4 2 41;1432 E3 2 41;1434 E4 2 41;1436 G#4 2 41;1444 A3 2 41;1446 E4 2 41;1448 A4 2 41',
]


def play_song():
    try:
        mySong = music(songs[0], pins=[Pin(BUZZER_PIN)])
        while True:
            mySong.tick()
            sleep(0.04)
    finally:
        GPIO.cleanup()
